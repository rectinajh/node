package main

import (
	"bytes"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"text/template"
)

const undefinedDb = ""

var outputSourceFile = flag.String("output", "gen_db.go", "Name of output source file with binary data")
var dbFilename = flag.String("dbname", undefinedDb, "Name of the db file to import")

func main() {
	flag.Parse()
	if *dbFilename == undefinedDb {
		fmt.Println("dbname parameter expected")
		os.Exit(1)
	}

	binaryData, err := ioutil.ReadFile(*dbFilename)
	checkError(err)

	encodedDataBuffer := &bytes.Buffer{}
	encodingWriter := base64.NewEncoder(base64.RawStdEncoding, encodedDataBuffer)
	written, err := encodingWriter.Write(binaryData)
	checkError(err)
	if written != len(binaryData) {
		fmt.Println("Written and expected data length mismatch")
		os.Exit(1)
	}
	defer encodingWriter.Close()

	tmpl, err := template.New("dbDataTemplate").Parse(sourceFileOutput)
	checkError(err)

	outputFile, err := os.Create(*outputSourceFile)
	checkError(err)
	defer outputFile.Close()

	tmpl.Execute(outputFile, splitToFixedLengthStrings(encodedDataBuffer.Bytes(), 120))
	checkError(err)
}
func splitToFixedLengthStrings(input []byte, strSize int) []string {
	var res []string

	fullStringCount := len(input) / strSize

	for i := 0; i < fullStringCount; i++ {
		offsetStart := i * strSize
		res = append(res, string(input[offsetStart:offsetStart+strSize]))
	}

	if len(input)%strSize > 0 {
		res = append(res, string(input[fullStringCount*strSize:]))
	}
	return res
}

func checkError(err error) {
	if err != nil {
		fmt.Println("Error: ", err.Error())
		os.Exit(1)
	}
}

var sourceFileOutput = `package location

// generated by generator.go - DO NOT EDIT
var dbData = {{range .}} 
	"{{.}}" +{{end}}
	""
`

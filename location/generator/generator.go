/*
 * Copyright (C) 2017 The "MysteriumNetwork/node" Authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package main

import (
	"bytes"
	"encoding/base64"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"text/template"
)

const undefinedDb = ""

var outputSourceFile = flag.String("output", "gen_db.go", "Name of output source file with binary data")
var dbFilename = flag.String("dbname", undefinedDb, "Name of the db file to import")

func main() {
	flag.Parse()
	if *dbFilename == undefinedDb {
		fmt.Println("dbname parameter expected")
		os.Exit(1)
	}

	binaryData, err := ioutil.ReadFile(*dbFilename)
	exitOnError(err)

	encodedData, err := encodeToBase64(binaryData)
	exitOnError(err)

	outputFile, err := os.Create(*outputSourceFile)
	exitOnError(err)
	defer outputFile.Close()

	err = generateSourceFile(outputFile, encodedData)
}

func splitToFixedLengthStrings(input []byte, strSize int) []string {
	var res []string

	fullStringCount := len(input) / strSize

	for i := 0; i < fullStringCount; i++ {
		offsetStart := i * strSize
		res = append(res, string(input[offsetStart:offsetStart+strSize]))
	}

	if len(input)%strSize > 0 {
		res = append(res, string(input[fullStringCount*strSize:]))
	}
	return res
}

func encodeToBase64(data []byte) ([]byte, error) {
	encodedDataBuffer := &bytes.Buffer{}
	encodingWriter := base64.NewEncoder(base64.RawStdEncoding, encodedDataBuffer)
	written, err := encodingWriter.Write(data)
	if err != nil {
		return nil, err
	}
	if written != len(data) {
		return nil, errors.New("written and expected data length mismatch")
	}
	encodingWriter.Close()
	return encodedDataBuffer.Bytes(), nil
}

func generateSourceFile(output io.Writer, binaryData []byte) error {
	tmpl, err := template.New("dbDataTemplate").Parse(sourceFileOutput)
	if err != nil {
		return err
	}

	return tmpl.Execute(output, splitToFixedLengthStrings(binaryData, 120))
}

func exitOnError(err error) {
	if err != nil {
		fmt.Println("Error: ", err.Error())
		os.Exit(1)
	}
}

var sourceFileOutput = `/*
 * Copyright (C) 2017 The "MysteriumNetwork/node" Authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package location

// generated by generator.go - DO NOT EDIT
var dbData = {{range .}} 
	"{{.}}" +{{end}}
	""
`
